#include <string>

using namespace std;

class Solution 
{
private:
    bool check(const string& num1, const string& num2, const string& rest)
    {
        if ((num1.size() > 1 && num1[0] == '0') || (num2.size() > 1 && num2[0] == '0'))
            return false;
        string sum = add_strings(num1, num2);
        if (rest == sum) 
            return true;
        if (rest.size() < sum.size() || rest.substr(0, sum.size()) != sum) 
            return false;
        return check(num2, sum, rest.substr(sum.size()));
    }

public:
    bool isAdditiveNumber(string num)
    {
        int n = num.length();
        for (int i = 1; i <= n / 2; ++i) 
        {
            for (int j = 1; j <= (n - i) / 2; ++j) 
            {
                if (check(num.substr(0, i), num.substr(i, j), num.substr(i + j))) 
                {
                    return true;
                }
            }
        }
        return false;
    }

    string add_strings(const string& num1, const string& num2) 
    {
        string result;
        int carry = 0, i = num1.size() - 1, j = num2.size() - 1;
        while (i >= 0 || j >= 0 || carry) 
        {
            if (i >= 0) carry += num1[i--] - '0';
            if (j >= 0) carry += num2[j--] - '0';
            result = char(carry % 10 + '0') + result;
            carry = carry / 10;
        }
        return result;
    }
};

// it succeed in leetcode with bad space complexity
